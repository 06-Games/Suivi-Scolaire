name: Build project

on:
  pull_request: {}
  push: { branches: [master] }

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  UNITY_VERSION: 2020.1.16f1
  
jobs:

  # License
  checklicense:
    name: check if UNITY_LICENSE is set in github secrets
    runs-on: ubuntu-latest
    outputs:
      is_unity_license_set: ${{ steps.checklicense_job.outputs.is_unity_license_set }}
    steps:
      - name: Check whether unity activation requests should be done
        id: checklicense_job
        run: |
            echo "Skip activation job: ${{ env.UNITY_LICENSE != '' }}"
            echo "::set-output name=is_unity_license_set::${{ env.UNITY_LICENSE != '' }}"
  activation:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'false'
    name: Request activation file ðŸ”‘
    runs-on: ubuntu-latest
    steps:
      # Request manual activation file
      - name: Request manual activation file
        id: getManualLicenseFile
        uses: game-ci/unity-request-activation-file@v2.0-alpha-1
        with:
          unityVersion: ${{ env.UNITY_VERSION }}
      # Upload artifact
      - name: Expose as artifact
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.getManualLicenseFile.outputs.filePath }}
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}

  # Build
  unity_Builder:
    needs: [checklicense]
    if: needs.checklicense.outputs.is_unity_license_set == 'true'
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform:
          - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          - StandaloneWindows # Build a Windows standalone.
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          - StandaloneLinux64 # Build a Linux 64-bit standalone.
          - iOS # Build an XCode project
          - Android # Build an Android .apk standalone app.
    steps:
      - name: Clone repo
        uses: actions/checkout@v2
        with:
          lfs: true
      - name: Write secret file
        run: 'echo "$FILE_SECURITY" > Assets/Scripts/Security.cs'
        shell: bash
        env:
          FILE_SECURITY: ${{secrets.FILE_SECURITY}}
      - name: Cached libraries
        uses: actions/cache@v1.1.0
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-
      - name: Build
        uses: game-ci/unity-builder@v2.0-aplha-5
        with:
          # Global
          unityVersion: ${{ env.UNITY_VERSION }}
          targetPlatform: ${{ matrix.targetPlatform }}
          versioning: None
          buildName: Suivi-Scolaire
          
          # Android
          androidVersionCode: 1
          androidKeystoreName: Suivi-Scolaire.keystore
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: suivi-scolaire
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
      - name: Make the MacOS build executable
        if: matrix.targetPlatform == 'StandaloneOSX'
        run: sudo chmod 777 build/StandaloneOSX/Suivi-Scolaire.app/Contents/MacOS/*
      - name: Upload build
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.targetPlatform }}
          path: build

  # XCode build
  iOS_Builder:
    name: Build iOS App
    runs-on: macos-latest
    needs: [unity_Builder]
    steps:
      - name: Download XCode Project
        uses: actions/download-artifact@v4.1.7
        with:
          name: iOS
          path: xcode

      - name: Install XCode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      - name: Install xcbeautify
        uses: Cyberbeni/install-swift-tool@v2
        with:
          url: https://github.com/thii/xcbeautify
          version: '*'
      - name: Build Archive
        run: |
          chmod -R 777 xcode/iOS/Suivi-Scolaire/;
          set -o pipefail && xcodebuild -project xcode/iOS/Suivi-Scolaire/Unity-iPhone.xcodeproj -scheme Unity-iPhone -configuration Release -sdk iphoneos -parallelizeTargets -quiet -archivePath build/archive.xcarchive clean archive CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGN_ENTITLEMENTS="" CODE_SIGNING_ALLOWED="NO" AD_HOC_CODE_SIGNING_ALLOWED="YES" | xcbeautify -q;
      - name: Upload archive
        uses: actions/upload-artifact@v1
        with:
          name: iOS Archive
          path: build/
